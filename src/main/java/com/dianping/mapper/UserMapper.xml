<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dianping.mapper.UserMapper">

    <!-- 定义sql片段
     可以把常用的sql代码块提取出来，其他的statement可以重用这个sql片段
     通常sql片段中基于单表定义，这样可重用性高，其他查询若用到这个表的sql片段也可以使用
     另外，sql片段中不要包括where,因为如果查询中有好几个sql片段，不能有好几个where,因此where不放在sql片段中-->
    <sql id="query_user_where">
        <if test="userCustom!=null">
            <if test="userCustom.sex!=null and userCustom.sex!=''">
                and sex=#{userCustom.sex}
            </if>
            <if test="userCustom.username!=null and userCustom.username!=''">
                and username like "%${userCustom.username}%"
            </if>
        </if>
        <!--使用foreach 标签传入ids
             collection:指定输入对象中的集合属性
             item:每一个遍历的对象
             open:开始遍历时拼接的字符串
             close:结束遍历时拼接的字符串
             separator:用于在开始和结束中，分割的字符串
             foreach就是想要拼接一个sql放在select标签中，实现下面sql的拼接：
             and (id=1 or id=2 or id=3)
             -->
        <if test="ids!=null">
            <foreach collection="ids" item="item_id" open="and (" close=")" separator="or">
                id=#{item_id}
            </foreach>
        </if>
    </sql>


    <!--根据多个条件对用户信息进行综合查询 -->
    <select id="findUserByList" parameterType="UserQueryVo" resultType="UserCustom">
        <!--非动态sql:SELECT * FROM USER WHERE sex=#{userCustom.sex} AND username LIKE "%${userCustom.username}%";-->
        <!--动态sql，对sex,和username进行动态判断是否需要查询 -->
        SELECT * FROM USER
        <!--此处的where 可以自动帮助我们判断是否加and ,因此and可以放心大胆的写-->
        <where>
            <!--使用sql片段 注意若使用其他文件中的sql片段加namespace -->
            <include refid="query_user_where"></include>
            <!--也可以加入其他sql片段，当然也可以直接写sql不用 -->
        </where>
    </select>
    <!--根据多个条件对用户信息进行综合查询，查询总数 -->
    <select id="findUserByListCount" parameterType="UserQueryVo" resultType="int">
        <!--非动态sql:SELECT count(1) FROM USER WHERE sex=#{userCustom.sex} AND username LIKE "%${userCustom.username}%";-->
        <!--动态sql，对sex,和username进行动态判断是否需要查询 -->
        SELECT count(1) FROM USER
        <!--此处的where 可以自动帮助我们判断是否加and ,因此and可以放心大胆的写-->
        <where>
            <!--使用sql片段 注意若使用其他文件中的sql片段加namespace -->
            <include refid="query_user_where"></include>
            <!--也可以加入其他sql片段，当然也可以直接写sql不用 -->
        </where>
    </select>

    <!--定义resultMap
      将select id id_,username username_ from user查询出的列和User中属性做一个对应的映射
      type：进行映射时候的Java对象类型，可以使用别名
      id:对resultMap的唯一标识
      -->
    <resultMap id="userResultMap" type="user">
        <!--对主键进行映射用专用的id标签 -->
        <id column="id_" property="id"></id>
        <!--对普通列进行映射用result标签 -->
        <result column="username_" property="username"></result>
    </resultMap>
    <!--使用resultMap
    注意：若想使用其他文件中的resultMap，前面应该加上namespace,此处在一个文件中，不需写-->
    <select id="findUserByIdResultMap" parameterType="int" resultMap="userResultMap">
        select id id_,username username_ from user where id=#{id};
    </select>


    <!-- id :表示映射文件中的sql,将sql封装到mappedStatement对象中，所以将id称为statement的id
         parameterType:表示输入参数类型
         #{}：表示占位符
         #{id}:其中的参数表示输入参数名称，参数名称就是id,若输入参数是简单类型，则#{}中的参数名称可以任意
         resultType:表示sql返回类型，对应Java类
    -->
    <select id="findUserById" parameterType="int" resultType="User">
      SELECT * FROM USER WHERE id=#{id};
    </select>
    <!-- 注意 1：resultType表示一个java对象的类型，即使查询结果为多个，仍使用resultType
                 2:#{}表示占位符，${}用来连接字符串，起到字符串拼接的作用，存在sql注入的危险
                 ${value}若传递简单参数，则里面只能用value表示，而#{}没有这种限制
        -->
    <select id="findUserByName" parameterType="java.lang.String" resultType="com.dianping.po.User">
        SELECT * FROM USER WHERE username LIKE "%${value}%";
    </select>

    <!--添加用户
        parameterType:指定输入参数类型为pojo,这里因为是插入用户，需要插入java对象，并不是和查询一样的简单参数类型
        #{}中指定pojo的属性名称

        有时插入主表中记录后，从表需要主表中的主键值，作为从表的外键插入到从表中，因此经常需要Insert之后，获取该条记录的主键ID
          (1)其中一种方法是 获取mysql自增形式的主键 在mysql中使用函数 last_insert_id()得到插进表中的该行主键值，只适用于自增主键
         故可在mappedStatement中进行配置：
         keyProperty:表示查询出的ＩＤ放入parameterType中同一个Java对象的对应属性中
         order:表示在insert sql执行之后执行
         resultType:表示返回结果的类型
            -->
    <insert id="insertUser" parameterType="com.dianping.po.User">
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
            select LAST_INSERT_ID();
        </selectKey>
        INSERT INTO USER(username,birthday,sex,address) VALUES(#{username},#{birthday},#{sex},#{address});
    </insert>
    <!-- (2)另一种方式就是非自增主键形式，获取主键，通过UUID，首先必须把id改成varchar类型
          另外，uuid()函数方式是先获取函数值，在把该值输入到user中进行insert插入，因此相对于插入顺序是before
          -->
    <insert id="insertUserAndGetUUID" parameterType="com.dianping.po.User">
        <!--使用MySQL的uuid生成主键 注意此时的insert插入语句需要有id,而自增不需要-->
        <selectKey keyProperty="id" order="BEFORE" resultType="java.lang.String">
            select UUID(); <!--若是oracle，可用select 序列名.nextval()其他一样 -->
        </selectKey>
        INSERT INTO USER(id,username,birthday,sex,address) VALUES(#{id},#{username},#{birthday},#{sex},#{address});
    </insert>

    <!--删除user -->
    <delete id="deleteUserById" parameterType="java.lang.Integer">
        DELETE FROM  USER WHERE  id=#{id};
    </delete>
    <!--根据用户ID 更新用户信息，入参为pojo对象 -->
    <update id="updateUser" parameterType="com.dianping.po.User">
        <!--注意，入参对象中ID必须存在，否则就删除额所有
            另外，此处#{id}表示入参对象中的属性-->
        update USER set username=#{username},birthday=#{birthday},sex=#{sex},address=#{address} where id=#{id};
    </update>
</mapper>



